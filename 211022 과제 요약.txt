추상클래스
body가 구체화 되지 않는 추상메소드를 포함하고 있는 클래스
일반 속성과 메소드 포함 가능
추상클래스의 객체 생성 불가

추상메소드
자식클래스들이 가져야 할 속성,동작을 일반화함에 있어 부모클래스를 만드는 시점에 구체화 할 수 없을 때
반드시 자식클래스들은 그 메소드를 가지고 오버라이딩 해야함
메소들를 구체화 하지 않고 메소드 선언부만 적어 추상메소드로 만듬
abstract 키워드 사용
추상클래스의 객체는 생성할 수 없지만 그것을 구현한 다른 클래스의 객체 생성 가능

final
클래스의 멤버변수이름 앞
변수이긴 하지만 정해진 값 이외의 다른 값을 변경 금지 -> "상수" (문자열도 포함)
다른 일반 속성과 구별하기 위한 용도로 보통 대문자로 만듬
ex)Math.PI / Integer.MAX_VALUE / Integer.MIN_VALUE
클래스의 멤버메소드 이름 앞
상속관계에 있는 자식클래스들에게 오버라이딩 금지
클래스의 클래스이름 앞
클래스의 상속금지

인터페이스
자바에서 클래스의 다중상속 불가
다중상속의 효과를 기대할 목적으로 인터페이스 이용
완전추상의 개념으로 상수,추상메소드만으로 구성
변수명앞에 final을 붙이지 않아도 기본이 final, 반드시 초기값을 주어야함
메소드명앞에 abstract을 붙이지 않아도 기본이 abstract
인터페이스에는 body가 구체화된 메소드를 포함 불가
추상클래스는 body가 구체화된 메소프 포함 가능
인터페이스도 클래스와 마찬가지로 자료형의 개념
인터페이스와 인터페이스를 구현한 클래스는 상속관계에 있음
상위인터페이스의 참조변수가 자식클래스의 객체를 참조할 수 있음
상속관계에 있는 부모의 참조변수가 자식클래스의 객체를 참조할 때 부모클래스에 원래 있는 메소드 호출가능
자식클래스에서 오버라이딩한 메소드 동작
상속관계에 있는 부모의 참조변수가 자식클래스의 객체를 참조할 때 자식클래스에 새롭게 추가된 메소드 호출 불가
자식클래스로 형변환하여 호출 가능
상속관계에 있을때 자식클래스의 객체를 부모의 자료형으로 형변환 가능


instanceof 연산자
객체가 특정 클래스의 자료형인지 판별하기 위한 연산자
상속계층을 구성하고 있을 때 상위클래스의 배열에 자식클래스의 객체들을 담을 수 있음
이때 배열의 요소를 하나씩 꺼내 일괄처리 할때 자식클래스에서 추가된 메소드를 호출하기 위해서는 자식클래스로 형변환 필요
자식의 종류가 여러가지이고 호출해야하는 메소드가 다를때 맞춰서 형변환 해야함
이때 instanceof 연산자 이용



String
문자열 처리를 위한 여러가지 기능 제공
참조자료형이지만 기본자료형처럼 사용할 수 있음
네트워크 통신이나 파일로 자료를 저장할때 문자열데이터를 byte형으로 전환하여 전송
전송받은 byte형의 배열을 다시 String으로 만들기 위해 byte 배열을 매개변수로 가지는 String 생성자 이용
String 데이터를 byte으로 변환하기 위해 getByte()이용

String/StrngBuffer/StringBuilder
String은 변하지 않는 문자열 처리에 적합
String Buffer와 StringBuilder는 변하는 문자열 처리에 적합
String변수를 문자열로 만들고 문자열의 내용을 변경하면 새로운 메모리로 이동하고 원래의 객체는 garbage가 됨
StringBuffer나 StringBuilder 변수로 문자열을 만들고 문자열의 내용을 변경하면 객체자신이 변경되고 새로운 메모리로 이동되지 않음
변하는 문자열 처리에는 String이 적합하지 않음

charAt(int index)
문자열 데이터 중 인덱스 위치의 문자
빈칸도 문자로 취급

concat(String str)
원래의 문자열 뒤에 매개변수로 전달받은 문자열을 연결한 새로운 문자열 반환
String의 특징은 "불변"이므로 원래의 문자열은 변동이 없음
equals(Object obj)
참조자료형에서 비교연산자 ==은 두개의 객체가 서로 동일한 메모리를 참조하고 있는지 판별
참조자료형의 두개의 객체가 서로 동일한 값을 가지는지 판별하기 위해 equals 메소드를 이용
String도 참조자료형이기 때문에 동일한 문자열 판별시 equals 메소드 이용

equalsIgnoreCase()
대소문자 같은 것으로 판별

indexOf(String data) / indexOf(char data)
문자열안에서 특정문자여이나 문자가 위치한 인덱스를 반환하는 메소드
찾고자하는 문자나 문자열이 없으면 -1 출력
indexOf( ,int fromindex) : 인덱스번째 이후에 있으면 해당 인덱스 출력

substring(int beginIndex)
문자열데이터에서 beginIndex부터 끝까지 봔한하는 메소드
substring(int beginIndex, int endIndex)
문자열데이터에서 beginIndex부터 endIndex-1까지의 문자열을 반환하는 메소드

beginIndex 포함 endIndex 제외

ex) "hamburger".substring(4, 8) returns "urge"

length()
문자열의 길이를 정수로 반환하는 메소드
주의!
배열의 길이는 속성 length
문자열의 길이는 메소드 length()

replace(a,b)
String 문자열 중 a를 찾아 b로 변환하여 새로운 문자열을 반환하는 메소드

String [] split(String 정규표현식)
문자열데이터를 정규표현식에 따라 분리하여 분리된 문자열의 배열을 반환하는 메소드

StringTokenizer을 이용하여 문자열 분리 가능
hasMoreTokens()

boolean startsWith(String prefix)
문자열데이터가 특정 문자열로 시작하는지 판별하여 true,false를 반환하는 메소드

endsWith(String suffix)
문자열데이터가 특정 문자열로 끝나는지 판별하여 true,false를 반환하는 메소드
String toLowerCase()
문자열데이터를 모두 소문자로 변환한 새로운 문자열 반환 메소드
String toUpperCase()
문자열데이터를 모두 대문자로 변환한 새로운 문자열 반환 메소드

deleteCharAt(int index)
매개변수로 전달받은 index 위치의 문자를 삭제하는 메소드
delete(int start, int end)
start 위치에서부터 end-1까지 문자열을 삭제하는 메소드

insert(int offset , b )
인덱스 자리에 b를 삽입해주는 메소드

java.util.Date
자바초기부터 있던 클래스
연도에 1900을 더해서 사용Date의 사용
getYear() 연도를 반환하는 메소드. 사용시 +1900
getMonth() 월을 반환하는 메소드. 1월은 0을 반환
getDate() 날을 반환
getHours() 시를 반환
getMinutes() 분을 반환
getSeconds() 초를 반환
getDay() 요일을 정수형으로 반환. 일요일이 0

java.util.Calendar
추상클래스
직접 객체를 생성할 수 없으며 getInstance 메소드를 통해 객체 생성 가능
연도에 1900 더하지 않아도 됨
Calendar 클래스의 사용
Calendar클래스는 사용자가 직접 객체를 생성할 수 없음
static Calendar getInstance() 메소드를 사용하여 Calendar 객체 생성 가능


java.util.GregorianCalendar
Calender 클래스의 자식클래스
객체를 직접 생성 가능

컬렉션프레임워크
동적배열의 개념
많은 양의 자료를 처리하기 위한 자료구조
자료형이 다른 것을 담을 수도 있음
데이터 추가,삭제 편리
배열의 단점을 해결하기 위해 사용
자료를 추가할 때마다 크기가 동적으로 늘어남
Set,List,Map
많은 자료를 처리하기 위한 자료구조
동적으로 데이터를 추가,삭제,서로 다른 자료형을 담을 수 있음


종류	특징
Set	자료의 중복을 허용하지 않음
List	자료의 중복을 허용
Map	key와 value가 한쌍으로 이루어진 자료구조

HashSet
중복x
순서유지x

LinkedHashSet
데이터 중복x
데이터 순서 유지



Random 클래스
임의의 값(int,boolean,double ...)을 가지기 위한 클래스
nextInt() int가 표현할 수 있느 최소~최댓값 범위 안에 있는 난수 발생
nextInt(int bound) 0~bound 사이의 난수 발생
List
중복 데이터 허용
List 인터페이스를 구현한 클래스엔 ArrayList, LinkedList, Vector 등이 있음
사용방법은 거의 유사
list의 데이터에 접근하기 위해서는 인덱스 사용
자바 초기에는 Vector을 많이 사용하였으나 현재에는 Vector보다 ArrayList,LinkedList를 더 많이 사용
초기에는 자료형을 다담을 수 있는 것이 좋은 줄 알았지만 이것저것 다 담고 꺼내서 사용하기 불편
자바 5.0 이후부터 가급적이면 컬렉션프레임워크에 담을 데이터를 한정하여 사용하기 권장 -> 제네릭 <>
ArrayList와 LinkedList는 사용하기 위한 메소드는 동일하지만 내부적으로 동작하는 방식이 다름
자료형을 정수로 제한할때 기본자료형 int 사용 불가 객체를 만들어주는 Integer 클래스 사용 - 아래 Waapper 클래스 참고

ArrayList

데이터를 추가,삭제 할때 마치 배열처럼 동작
중간에 데이터를 추가하면 내부적으로 다시 메모리를 할당하고 자료를 다 옮겨주는 작업 수행
ArrayList list = new ArrayList(); list에 온갖 자료형을 담을 수 있음
ArrayList list = new ArrayList(); list에는 String만 담을 수 있음
LinkedList

추가하는 자료의 앞뒤 참조하는 주소값만 변경 (기차가 연결된 구조 생각)
데이터 중간에 추가,삭제가 빈번하면 ArrayList보다는 LinkedList를 사용하는 것이 좋음


Map
set과 List가 배열처럼 인덱스에 의해 자료에 접근하는 방식 이라면 Map은 Key를 이용
key와 value가 한쌍으로 이루어진 자료구조
map은 인덱스가 아니라 key에 의해 접근
key 자체가 어떤 데이터인지 설명하는 역할
key 중복x
value 중복가능





